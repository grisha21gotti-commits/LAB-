import java.util.Arrays;

public class MergeSort {
    public static void mergeSort(int[] arr) {
        if (arr.length <= 1) return;
        int mid = arr.length / 2;

        int[] left = Arrays.copyOfRange(arr, 0, mid);
        int[] right = Arrays.copyOfRange(arr, mid, arr.length);

        mergeSort(left);
        mergeSort(right);

        merge(left, right, arr);
    }

    private static void merge(int[] left, int[] right, int[] out) {
        int i = 0, j = 0, k = 0; // i — по left, j — по right, k — по out
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) { // <= сохраняет стабильность
                out[k++] = left[i++];
            } else {
                out[k++] = right[j++];
            }
        }
        while (i < left.length) out[k++] = left[i++];
        while (j < right.length) out[k++] = right[j++];
    }

    public static void print(String title, int[] arr) {
        System.out.print(title + ": ");
        for (int x : arr) System.out.print(x + " ");
        System.out.println();
    }

    public static void main(String[] args) {
        int[] a = {38, 27, 43, 3, 9, 82, 10};
        print("Исходный", a);
        mergeSort(a);
        print("Отсортированный", a);
    }
}


Пояснения:

mergeSort делит массив и вызывает себя рекурсивно.

merge аккуратно сливает два отсортированных массива left и right в out.

Условие <= — ключ к стабильности.
Результат работы кода:
Исходный: 38 27 43 3 9 82 10 
Отсортированный: 3 9 10 27 38 43 82 
