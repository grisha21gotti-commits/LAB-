код:
#include <iostream>
#include <vector>
using namespace std;

void heapify(vector<int>& a, int n, int i) {
    int largest = i;      // предполагаем, что корень самый большой
    int l = 2*i + 1;      // левый
    int r = 2*i + 2;      // правый
    if (l < n && a[l] > a[largest]) largest = l;
    if (r < n && a[r] > a[largest]) largest = r;
    if (largest != i) {
        swap(a[i], a[largest]);
        heapify(a, n, largest); // опускаем дальше
    }
}

void heapSort(vector<int>& a) {
    int n = (int)a.size();
    // 1) строим max-heap
    for (int i = n/2 - 1; i >= 0; --i) heapify(a, n, i);
    // 2) извлекаем максимум и кладём его в конец
    for (int i = n - 1; i > 0; --i) {
        swap(a[0], a[i]);        // максимум -> в конец
        heapify(a, i, 0);        // восстанавливаем кучу на сокращённом префиксе
    }
}

void print(const vector<int>& a, const string& t) {
    cout << t << ": ";
    for (int x : a) cout << x << " ";
    cout << "\n";
}

int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};
    print(arr, "Исходный");
    heapSort(arr);
    print(arr, "Отсортированный");
    return 0;
}
Пояснения:
heapify — просеивание вершины вниз, чтобы соблюсти a[parent] >= a[children].
Построение кучи идёт «снизу вверх» с последнего внутреннего узла.
Результат работы кода:
Исходный: 12 11 13 5 6 7 
Отсортированный: 5 6 7 11 12 13 
